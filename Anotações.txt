Use a perspectiva Java EE no Eclipse.

Criar uma configuração de servidor:
Aba Server-> Define a new Server.

Escolha o Tomcat (a versão que você tiver baixado). 
Aponte para o caminho do Tomcat (sem incluir o caminho\bin).
Escolha uma JRE diferente da opção default (por que?).

Após finalizar, inicie o servidor. Na aba de Console você vai ver 
o log do Tomcat  (e o caminho de rede acessível para ele).


Para criar um projeto no Eclipse Java EE IDE, use:
File -> New -> Dynamic Web Project. 

Opções do primeiro passo do assistente:
    Project name: gerenciador
    Target runtime: Apache Tomcat 9.0 (o mesmo configurado anteriormente)

Opções do segundo passo do assistente:
    Source folder on build path: é o caminho onde estarão as classes que 
        serão compiladas. No curso o caminho é apenas src.
    Default output folder:  é o caminho dos bytecodes compilados do projeto.
        Por padrão o caminho é build\classes.

Opções do terceiro passo do assistente:
    Context Root: como o projeto será chamado na URL. 
        No curso temos o valor "gerenciador".
    Content Directory: pasta que vai conter o conteúdo Web.
        No curso o valor é WebContent.
    Generate web.xml deployment descriptor: gera o DD, (configurações em XML).
        No curso marcamos essa opção.

As opções do assistente podem ser modificadas na propriedade 
Deployment Assembly do projeto, sendo:
    Source          Deploy Path
    /src            WEB-INF/classes     // Bytecodes
    /WebContent     /                   // Conteúdo Web.


Servlet é uma especificação Java. Para cada especificação Java, temos um XML
diferente. O web.xml serve para a especificação Servlet; na especificação JPA,
temos o persistence.xml; na especificação ejb, temos o ejb.xml etc.

Esses XML não são obrigatórios, mas permitem uma personalização do projeto.


Para incluir o projeto no servidor Tomcat, clique com o botão direto no 
servidor Tomcat (aba Servers) e escolha "Add and remove". Acrescente os 
projetos e clique em Finish.

Dentro da raiz pasta WebContent, crie um arquivo HTML chamado bem-vindo.html.
Depois tente acessar: http://localhost:8080/gerenciador/bem-vindo.html
Padrão: http://localhost:8080/{projeto}/{arquivo}

Ao sobrescrever o método service de HttpServlet, tire os throws:
@Override
protected void service(HttpServletRequest req, HttpServletResponse resp) {
    
}

Anote a classe do servlet com a classe WebServlet(urlpatterns="caminho"):
@WebServlet(urlPatterns = "/oi")
public class OiMundoServlet extends HttpServlet{
    ...
}


Ao criar um novo Servlet usando o assistente do Eclipse, é possível mudar o
caminho da URL no segundo passo do assistente. No terceiro passo do assistente
podemos selecionar os métodos que serão sobrescritos. No exemplo, vamos 
sobrescrever o método service(HttpServletRequest, HttpServletResponse).

#############################################################################
Use o rebuild para recompilar os arquivos, antes de subi-los para o Tomcat.
#############################################################################

Para capturar parâmetros da requisição, use o método getParameter do objeto
request. Dentro do método forneça a String com a chave do parâmetro:
	protected void service( HttpServletRequest request, 
                            HttpServletResponse response) throws IOException {
        ...
		String empresa = request.getParameter("nome");
        ...
    }


Repare no método POST no formulário HTML formNovaEmpresa. O método service
do Servlet atende tanto às requisições GET quanto POST.

Os servlets tem métodos com os nomes do<NomeDoMétodoHTTP>:
    doPost (substituiu o método service no servlet NovaEmpresaServlet);
    doGet;
    doPut;
    doHeader;
    doDelete;
    doTrace.

Perceba que, como o servlet só aceita o método POST agora, requisições 
GET não são permitidas, a não ser que se escreva o método doGet.
A seguinte URL não estará disponível via get: 
http://localhost:8080/gerenciador/novaEmpresa?nome=Teste

No projeto, o modelo fica todo em memória e ele consite em duas classes:
    Empresa;
    Banco.
A classe banco armazena uma lista de empresas, que cresce na medida que se 
acrescenta uma empresa usando o método POST.


Arquivos de extensão JSP são HTML com Scriptlets (códigos java embutido).
Os scriptlets funcionam da mesma forma que as marcações do PHP:
    <? echo "Código PHP"; ?>
    <% System.out.println("Scriptlet Java"); %>

Os arquivos JSP por padrão contém um objeto out, que pode ser usado nos
scriptlets para gerar conteúdo HTML dinâmico.

Há um atalho para não usar o out.print: use o Scriptlet <%= variavel %>.


O RequestDispatcher é um objeto que possibilita a comunicação entre um servlet
e uma página JSP. Para obte-lo, usamos o método getRequestDispatcher do objeto 
request do servlet.

No servlet, passamos pela requisição os atributos com o método setAttribute. 
O RequestDispatcher recebe a request (incluindo seus atributos) e a response.
Na página JSP, pegamos os atributos da requisção com o método getAttribute.


A diretiva <%@ page import="caminho.da.Classe, caminho.da.outra.Classe "%>
serve para importar classes para dentro do JSP.

No Java, é importante tipar direito o que é obtido de request.getAttribute.
Por isso os casts de tipos são tão importantes no JSP.


Comando para imprimir diretamente uma variável no JSP: ${variável}. Esta é a 
notação Expression Language (EL) do JEE.


As bibliotecas de tags do padrão JSP (JSP Standard Tag Libs ou JSTL) não vem
por padrão nos containers de servlet. Você precisa baixá-los de algum lugar.
Por exemplo, do site do Tomcat: https://tomcat.apache.org/taglibs/standard/
Copie o arquivo jstl-1.2.jar para o caminho de dentro do conteúdo web:
\WebContent\WEB-INF\lib\jstl-1.2.jar. É possível copiar esse jar também para
o container Java (tem que olhar a documentação do servidor Java pra isso).

Para importar a taglib (depois de copiar o jar para a lib em WEB-INF), use nas
JSP a seguinte tag:
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>

As tags JSTL também recebem como parâmetros as variáveis acessadas no 
RequestDispatcher.
Exemplo de foreache com as tags JSTL:

	<ul>
		<c:forEach var="empresa" items="${ empresas }">
			<li>${ empresa.nome }</li>
		</c:forEach>		
	</ul>

Sendo que empresas (plural) é uma variável que veio da RequestDispatcher, 
e a variável empresa (singular) foi declarada dentro do for. Para referenciar
o objeto empresa, é preciso usar a Expression Language.

O Context Root (nome do projeto na URL do navegador) é modificado através da 
propriedade de projeto Web Project Settings. O Context Root pode ser diferente
do nome da pasta que contém o projeto. Esse Context Root é uma propriedade
no Eclipse/Tomcat, não nos arquivos do projeto JSP (src ou WebContent).

A tag <c:url value="/servlet"/> retorna o path da URL (tudo que vem depois do
nome do servidor). Exemplo: com o caminho http://localhost:8080/proj/servlet,
o path retornado seria /proj/servlet. Outro exemplo: queremos acessar o servlet
novaEmpresa no Context Root root. Para obter o path /root/servlet, usamos 
<c:url value="/servlet"/>.

No curso, foram usados duas tags <c:if text=""> em novaEmpresaCriada.jsp. Mas 
há outra sintaxe semelhante:
    <c:choose>
        <c:when text="${ not empty empresa }">
            Empresa ${ empresa } cadastrada com sucesso!
        </c:when>
        <c:otherwise>
            Nenhuma empresa cadastrada.
        </c:otherwise>
    </c:choose>

Curso de JSTL na Alura (descontinuado): https://cursos.alura.com.br/course/jstl

Ao importar as JSTL, nunca use as seguintes URIs:
    http://java.sun.com/jstl/core
    http://java.sun.com/jstl/fmt

Ao invés disso, use:
    http://java.sun.com/jsp/jstl/core
    http://java.sun.com/jsp/jstl/fmt

Repare na diferença das URIs: tem o /jsp/ por dentro. As primeiras URIs estão
depreciadas. Isso pode trazer problemas ao usar as taglibs.

A classe SimpleDateFormat foi usada no curso para gerar datas a partir de uma
String. O parse retorna um objeto da classe Date. As boas práticas mandam usar
objetos do tipo Calendar, mas para o curso já está bom o bastante.


Há um exemplo de redirecionamento no curso: após cadastrar a empresa, o servlet
redirecionaria para a listagem de Empresas. Mas a lista de empresas não é 
carregada no servlet de criação de nova empresa, e não vale a pena copiar a
lógica do servlet de listagem para o servlet de criação de Empresa.

Para resolver essa questão, basta fornecer para o RequestDispatcher o caminho
do servlet que vai continuar atendendo a requisição.

É importante que o método HTTP do servlet posterior seja o mesmo que o usado
no servlet original. Por exemplo, para criar uma empresa, usamos o POST; para
confirmar a inserção e exibir a lista de empresas, o método precisa ser POST
também. Para isso, podemos mudar o método de doGet no servlet da listagem para
o método service. Outra forma é criar o método doPost e dentro dele chamar o
método doGet com os parâmetros request e response repassados.

Mas temos um problema: o navegador ainda vai estar no path para o servlet de
criação de empresas. Se o usuário atualizar a página, a requisição POST é 
repetida e a lógica de inserção de empresas também.


O RequestDispatcher na verdade é um redirecionador server-side. Para evitar O
problema de repetição da lógica de inserção, basta forçar um redirecionamento
client-side. Para fazer esse redirecionamento, use o response.sendRedirect().

Não use response.sendRedirect("/recurso"), com a barra dentro. Use assim:
response.sendRedirect("recurso"). Senão, o path do recurso não será encontrado.

Temos mais um problema: a mensagem de confirmação não aparece no recurso 
chamado no redirecionamento. Isso porque ao redirecionar, uma nova requisição
é feita. Como o RequestDispatcher trata uma requisição por vez, os parâmetros
atribuídos ao RequestDispatcher se perdem. Por isso a empresa fica nula e o
JSP não localiza esse atributo.

Curso de Chrome DevTools: https://cursos.alura.com.br/course/chrome-devtools
Esse curso está descontinuado, mas pode ser bom.


Iterators são objetos próprios para trabalhar com listas (java.util.List). 
Toda lista tem o método iterator(), que retorna um iterador. O iterador tem 3
métodos interessantes:
    hasNext => booleano que testa se há mais elementos no iterador;
    next    => captura o próximo elemento do iterador;
    remove  => remove o objeto atual do iterador.

Se você for usar um loop for para excluir um elemento de uma lista, essa lista
será alterada e o loop vai ter problemas de modificação concorrente. Iterators
são uma alternativa melhor para evitar esses problemas.


Há duas fontes de variáveis nas páginas JSP: a própria página JSP (com as
variáveis declaradas dentro das tags com o atributo var="") e os servlets cujo
RequestDispatcher redireciona a requisição para o JSP.


O curso propõe 2 classes: MostraEmpresaServlet e AlteraEmpresaServlet. Mas o
servlet AlteraEmpresaServlet implementa doPost, e o MostraEmpresaServlet
implementa doGet. Talvez as duas classes pudessem se juntar em uma só, com
os dois métodos implementados.


O arquivo web.xml NÃO é mais obrigatório, mas versões legadas de código Java
pode usar esse arquivo. Uma das funções desse arquivo é definir os arquivos
de boas vindas do projeto (os indexes).

Outra função (obsoleta) do web.xml é registrar os mapeamentos dos servlets às
URLs. Veja no web.xml a inserção do path /ola que redireciona para o servlet
OiMundoServlet. O padrão para o mapeamento de servlets no web.xml é:

    <servlet>
        <servlet-name>nome-do-servlet</servlet-name>
        <servlet-class>caminho.do.pacote.ClasseDoServlet</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>nome-do-servlet</servlet-name>
        <url-pattern>/path-personalizado</url-pattern>
        <url-pattern>/path-personalizado-adicional</url-pattern>
    </servlet-mapping>

O web.xml também define o timeout de sessões na aplicação Java EE.
